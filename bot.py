# bot.py

from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
import asyncio
import config
from database import (
    init_db,
    add_authorized_user,
    remove_authorized_user,
    get_all_authorized_users,
    add_request,
    update_response,
    get_request_by_id
)
import re

bot_token = os.getenv("BOT_TOKEN")
if not bot_token:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = Bot(token=bot_token)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb_start = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù—É–∂–Ω–∞ –∑–∞—è–≤–∫–∞?")]], resize_keyboard=True)

kb_choice = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ"), KeyboardButton(text="–†–∞–¥–∏—Å—Ç")]],
    resize_keyboard=True
)

kb_operator_type = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û–ö"), KeyboardButton(text="–£–¥–∞–ª–µ–Ω–Ω—ã–π –û–ö")]],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RequestForm(StatesGroup):
    choice = State()         # –í—ã–±–æ—Ä –º–µ–∂–¥—É –û–ö –∏ –†–∞–¥–∏—Å—Ç–æ–º
    operator_type = State()  # –¢–∏–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–û–ö / —É–¥–∞–ª–µ–Ω–Ω—ã–π –û–ö)
    comment = State()        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ

def is_admin(user_id):
    return user_id in config.USER_ADMINS

def is_user_authorized(user_id):
    return user_id in config.USER_ADMINS or user_id in get_all_authorized_users()

@dp.startup()
async def on_startup():
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    print("üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    if not is_user_authorized(message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return
    
    await state.clear()
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", reply_markup=kb_start)

@dp.message(F.text == "–ù—É–∂–Ω–∞ –∑–∞—è–≤–∫–∞?")
async def request_started(message: Message, state: FSMContext):
    await message.answer("–ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ?", reply_markup=kb_choice)
    await state.set_state(RequestForm.choice)

@dp.message(RequestForm.choice)
async def handle_choice(message: Message, state: FSMContext):
    text = message.text.strip()
    if text not in ["–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ", "–†–∞–¥–∏—Å—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ –∏–ª–∏ –†–∞–¥–∏—Å—Ç")
        return

    await state.update_data(choice=text)
    if text == "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ":
        await message.answer("–û–ö –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π –û–ö?", reply_markup=kb_operator_type)
        await state.set_state(RequestForm.operator_type)
    else:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∑–∞—è–≤–∫–µ:", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[]], resize_keyboard=True))
        await state.set_state(RequestForm.comment)

@dp.message(RequestForm.operator_type)
async def handle_operator_type(message: Message, state: FSMContext):
    text = message.text.strip()
    if text not in ["–û–ö", "–£–¥–∞–ª–µ–Ω–Ω—ã–π –û–ö"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –û–ö –∏–ª–∏ –£–¥–∞–ª–µ–Ω–Ω—ã–π –û–ö")
        return

    await state.update_data(operator_type=text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∑–∞—è–≤–∫–µ:")
    await state.set_state(RequestForm.comment)

@dp.message(RequestForm.comment)
async def handle_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    data = await state.get_data()

    choice = data.get("choice")
    operator_type = data.get("operator_type")

    full_text = ""
    chat_type = ""
    chat_id = None

    if choice == "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ":
        full_text = f"–ù—É–∂–µ–Ω –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ: {operator_type}"
        chat_id = config.CHAT_OK
        chat_type = "ok" if operator_type == "–û–ö" else "remote_ok"
    elif choice == "–†–∞–¥–∏—Å—Ç":
        full_text = "–ù—É–∂–µ–Ω —Ä–∞–¥–∏—Å—Ç"
        chat_id = config.CHAT_RADIO
        chat_type = "radio"

    if comment:
        full_text += f"\n\n{comment}"

    user_name = message.from_user.full_name
    user_id = message.from_user.id

    req_id = add_request(user_id, user_name, choice, operator_type or "–ù–µ –Ω—É–∂–µ–Ω", chat_type, comment)

    sent = await bot.send_message(chat_id, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #{req_id}:\n\n{full_text}")
    print(f"üì® –ó–∞–ø—Ä–æ—Å #{req_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {sent.message_id}")

    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!", reply_markup=kb_start)
    await state.clear()

@dp.message(F.reply_to_message)
async def handle_group_response(message: Message):
    replied_to = message.reply_to_message
    if not replied_to.from_user.is_bot:
        return

    try:
        match = re.search(r"#(\d+)", replied_to.text)
        if match:
            req_id = int(match.group(1))
        else:
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ req_id: {e}")
        return

    responder_username = message.from_user.username
    responder_name = message.from_user.full_name

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if responder_username:
        responder_link = f"https://t.me/{responder_username}" 
    else:
        responder_link = responder_name

    update_response(req_id, message.text, responder_name)

    request = get_request_by_id(req_id)
    if not request:
        return

    db_id, user_id, requester_name, ok_choice, radio_choice, chat_type, comment, response_text, responder_name = request

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∑–∞—è–≤–∏—Ç–µ–ª—é
    try:
        if chat_type in ["ok", "remote_ok"]:
            answer_text = f"‚úÖ –û–ö –Ω–∞—à—ë–ª—Å—è: {responder_link}\n\n"
        elif chat_type == "radio":
            answer_text = f"‚úÖ –†–∞–¥–∏—Å—Ç –Ω–∞—à—ë–ª—Å—è: {responder_link}\n\n"
        else:
            answer_text = f"üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {responder_link}\n\n"

        await bot.send_message(user_id, answer_text)
        print(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å #{req_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–µ–º—É—Å—è ‚Äî –¥—É–±–ª–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏ –¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        role = ok_choice if ok_choice and ok_choice != "–ù–µ –Ω—É–∂–µ–Ω" else radio_choice
        chat_info = await bot.get_chat(user_id)
        username = chat_info.username

        profile_link = f"https://t.me/{username}"  if username else f"tg://user?id={user_id}"

        responder_text = (
            f"–í–∞—Å –ø—Ä–æ—Å—è—Ç –ø–æ–º–æ—á—å –∫–∞–∫ {role}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞—è–≤–∏—Ç–µ–ª—è:\n"
            f"{comment}\n\n"
            f"–ü—Ä–æ—Ñ–∏–ª—å –∑–∞—è–≤–∏—Ç–µ–ª—è: {profile_link}"
        )

        await bot.send_message(message.from_user.id, responder_text)
        print(f"üì© –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ—Å–ª–∞–Ω –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–µ–º—É—Å—è: {message.from_user.id}")

    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")

# –ö–æ–º–∞–Ω–¥–∞: /adduser 123456789
@dp.message(F.text.startswith("/adduser"))
async def add_user(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        new_user_id = int(message.text.split()[1])
        if is_user_authorized(new_user_id):
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")
            return

        add_authorized_user(new_user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /adduser 123456789")


# –ö–æ–º–∞–Ω–¥–∞: /removeuser 123456789
@dp.message(F.text.startswith("/removeuser"))
async def remove_user(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = int(message.text.split()[1])

        if user_id in config.USER_ADMINS:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        if not is_user_authorized(user_id):
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
            return

        remove_authorized_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /removeuser 123456789")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
